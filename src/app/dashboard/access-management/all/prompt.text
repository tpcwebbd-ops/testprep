Here is an example of Add.tsx ```import { useState } from 'react';

import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';

import { useUsersAccessStore } from '..//storestore';
import { useAddUsers_accessMutation } from '../redux/rtk-api';
import { IAccesses, defaultAccesses } from '@/app/dashboard/accessess/all/api/v1/model';
import { formatDuplicateKeyError, handleError, handleSuccess, isApiErrorResponse } from './utils';

const InputField: React.FC<{
  id: string;
  name: string;
  label: string;
  type?: string;
  value: string | number;
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
}> = ({ id, name, label, type = 'text', value, onChange }) => (
  <div className="grid grid-cols-4 items-center gap-4 pr-1">
    <Label htmlFor={id} className="text-right">
      {label}
    </Label>
    {type === 'textarea' ? (
      <Textarea id={id} name={name} value={value as string} onChange={onChange} className="col-span-3" />
    ) : (
      <Input id={id} name={name} type={type} value={value} onChange={onChange} className="col-span-3" />
    )}
  </div>
);

const AddNextComponents: React.FC = () => {
  const { toggleAddModal, isAddModalOpen, setUsersAccess } = useUsersAccessStore();
  const [addAccesses, { isLoading }] = useAddUsers_accessMutation();
  const [newAccess, setNewAccess] = useState<IAccesses>(defaultAccesses);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewAccess({ ...newAccess, [name]: value });
  };

  const handleCheckboxChange = (name: string, checked: boolean) => {
    setNewAccess({ ...newAccess, [name]: checked });
  };

  const handleSelectChange = (name: string, value: string) => {
    setNewAccess({ ...newAccess, [name]: value });
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>, field: string, nestedField?: 'start' | 'end') => {
    const { value } = e.target;
    if (nestedField) {
      setNewAccess({
        ...newAccess,
        [field]: {
          ...(newAccess[field as keyof IAccesses] as object),
          [nestedField]: new Date(value),
        },
      });
    } else {
      setNewAccess({ ...newAccess, [field]: new Date(value) });
    }
  };

  const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>, field: string, nestedField?: 'start' | 'end') => {
    const { value } = e.target;
    if (nestedField) {
      setNewAccess({
        ...newAccess,
        [field]: {
          ...(newAccess[field as keyof IAccesses] as object),
          [nestedField]: value,
        },
      });
    } else {
      setNewAccess({ ...newAccess, [field]: value });
    }
  };

  const handleArrayChange = (name: string, value: string) => {
    setNewAccess({ ...newAccess, [name]: value.split(',').map(item => item.trim()) });
  };

  const handleAddAccess = async () => {
    try {
      const addedAccess = await addAccesses(newAccess).unwrap();
      setAccesses([addedAccess]);
      toggleAddModal(false);
      setNewAccess(defaultAccesses);
      handleSuccess('Added Successful');
    } catch (error: unknown) {
      console.error(error);
      let errMessage: string = 'An unknown error occurred.';
      if (isApiErrorResponse(error)) {
        errMessage = formatDuplicateKeyError(error.data.message) || 'API error';
      } else if (error instanceof Error) {
        errMessage = error.message;
      }
      handleError(errMessage);
    }
  };

  return (
    <Dialog open={isAddModalOpen} onOpenChange={toggleAddModal}>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>Add New Access</DialogTitle>
        </DialogHeader>

        <ScrollArea className="h-[500px] w-full rounded-md border p-4">
          <div className="grid gap-4 py-4">
            <InputField id="student" name="student" label="Student" value={newAccess['student']} onChange={handleInputChange} />
            <InputField id="admin" name="admin" label="Admin" value={newAccess['admin']} onChange={handleInputChange} />
            <InputField id="moderator" name="moderator" label="Moderator" value={newAccess['moderator']} onChange={handleInputChange} />
            <InputField id="mentor" name="mentor" label="Mentor" value={newAccess['mentor']} onChange={handleInputChange} />
            <InputField id="instructor" name="instructor" label="Instructor" value={newAccess['instructor']} onChange={handleInputChange} />
          </div>
        </ScrollArea>

        <DialogFooter>
          <Button variant="outline" onClick={() => toggleAddModal(false)}>
            Cancel
          </Button>
          <Button disabled={isLoading} onClick={handleAddAccess}>
            {isLoading ? 'Adding...' : 'Add Access'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AddNextComponents;
``` 

I Want to rewrite this file.
I want to do the following things in this file.

1. fetch data form "http://localhost:3000/dashboard/users/all/api/v1&q={query}"

2. it return this json file '''
{
    "data": {
        "gAuthUsers": [
            {
                "_id": "68a5c9c535e60940afbb5cb4",
                "name": "Sharif Bhuyan",
                "userRole": [],
                "email": "ifu0118@gmail.com",
                "createdAt": "2025-08-20T13:12:37.905Z",
                "updatedAt": "2025-08-20T13:12:37.905Z",
                "__v": 0
            },
            {
                "_id": "68a0b18d73035abb59866610",
                "name": "Nura Alom Jitu",
                "userRole": [
                    "admin"
                ],
                "email": "nuraalomjitu143@gmail.com",
                "createdAt": "2025-08-16T16:27:57.464Z",
                "updatedAt": "2025-08-18T13:11:44.335Z",
                "__v": 0,
                "blockedBy": "",
                "imageUrl": "",
                "isBlocked": false,
                "passCode": "",
                "userUID": ""
            },
            {
                "_id": "689c6f44602027952db755e9",
                "name": "Shariful Islam",
                "userRole": [],
                "email": "sjuniv32@gmail.com",
                "createdAt": "2025-08-13T10:56:04.170Z",
                "updatedAt": "2025-08-13T10:56:04.170Z",
                "__v": 0
            },
            {
                "_id": "6899ccd2c368180735c61c80",
                "name": "Sharif Russel",
                "userRole": [],
                "email": "tpc.web.bd@gmail.com",
                "createdAt": "2025-08-11T10:58:26.819Z",
                "updatedAt": "2025-08-11T10:58:26.819Z",
                "__v": 0
            },
            {
                "_id": "6899cc51c368180735c61c7b",
                "name": "Toufiquer Rahman",
                "userRole": [],
                "email": "testpreptr@gmail.com",
                "createdAt": "2025-08-11T10:56:17.535Z",
                "updatedAt": "2025-08-11T10:56:17.535Z",
                "__v": 0
            }
        ],
        "total": 5,
        "page": 1,
        "limit": 10
    },
    "message": "GAuthUsers fetched successfully",
    "status": 200
}``` 

3. at the top there is a searchbar. if I write three word as query. then it fetch with query.
4. after that it show a list of data maxium 10.
5. each list have a add button.
6. If I hit Add button then it will fetch data from this url by post method"http://localhost:3000/dashboard/access-management/all/api/v1 " and default role is "user".
7. there is a cancel button to totggle popup the model. 


