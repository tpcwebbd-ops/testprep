here is example of attendance-component.ts
```
'use client';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { motion } from 'framer-motion';

const AttendanceComponent = ({ onAttend }: { onAttend: () => void }) => {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const formattedDate = format(time, 'eeee, MMMM do, yyyy');
  const formattedTime = format(time, 'h:mm:ss a');

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="flex h-[60vh] w-full flex-col items-center justify-center rounded-lg bg-white p-8 text-center shadow-lg"
    >
      <h2 className="text-3xl font-bold text-gray-800">Welcome!</h2>
      <p className="mt-2 text-gray-600">Please submit your attendance to begin today&apos;s lecture.</p>
      <div className="my-6 text-center text-lg text-gray-700">
        <p>{formattedDate}</p>
        <p className="font-semibold text-blue-600">{formattedTime} (BST)</p>
      </div>
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={onAttend}
        className="transform rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 px-8 py-3 text-lg font-semibold text-white shadow-md transition-all hover:shadow-lg"
      >
        Submit Attendance
      </motion.button>
    </motion.div>
  );
};

export default AttendanceComponent;

```

here is example of course-data.ts
``` 

export interface Question {
  id: number;
  question: string;
  options: string[];
  answer: string;
}

export interface ClassItem {
  id: number;
  title: string;
  duration: string;
  type: 'modal' | 'video' | 'Questions';
  modelCentent?: string;
  videoUrl?: string;
  questionsData?: Question[];
}

export interface Course {
  id: number;
  title: string;
  totalClass: number;
  duration: string;
  classList: ClassItem[];
}

export const calculateTotalVideoDuration = (classList: ClassItem[]): string => {
  const totalSeconds = classList
    .filter(item => item.type === 'video' && item.duration)
    .reduce((accumulator, currentItem) => {
      const timeParts = currentItem.duration.split(':').map(Number);
      const minutes = timeParts[0] || 0;
      const seconds = timeParts[1] || 0;
      return accumulator + minutes * 60 + seconds;
    }, 0);

  if (totalSeconds === 0) {
    return '0 minutes';
  }

  const totalMinutes = Math.floor(totalSeconds / 60);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;

  const parts: string[] = [];
  if (hours > 0) {
    parts.push(`${hours} Hour${hours > 1 ? 's' : ''}`);
  }
  if (minutes > 0) {
    parts.push(`${minutes} minute${minutes > 1 ? 's' : ''}`);
  }

  return parts.join(' ');
};

const classList: ClassItem[] = [
  {
    id: 1,
    title: '1-1 Introduction',
    duration: '02:30',
    modelCentent: '<strong>Carefull</strong> <h2>Todays Topic: Spoken</h2> <p>some text</p>',
    type: 'modal',
  },
  { id: 2, title: '1-2 Basic Spoken', duration: '10:00', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 3, title: '1-3 Pronunciation', duration: '12:15', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 4, title: '1-4 Common Phrases', duration: '08:45', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 5, title: '1-5 Intonation', duration: '11:05', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 6, title: '1-6 Linking Sounds', duration: '09:30', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 7, title: '1-7 Active Listening', duration: '07:00', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 8, title: '1-8 Vocabulary Building', duration: '14:20', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  { id: 9, title: '1-9 Review', duration: '05:00', videoUrl: 'https://www.youtube.com/embed/1S3jlxzDycs?si=1qNTrJByHxRCUyWl', type: 'video' },
  {
    id: 10,
    title: '1-10 Knowledge Check',
    duration: '15:00',
    type: 'Questions',
    questionsData: [
      { id: 1, question: 'What is the capital of Bangladesh?', options: ['Dhaka', 'Chittagong', 'Sylhet', 'Barisal'], answer: 'Dhaka' },
      { id: 2, question: 'What is the currency of Bangladesh?', options: ['BDT', 'USD', 'EUR', 'GBP'], answer: 'BDT' },
      { id: 3, question: 'What is the largest city in Bangladesh by area?', options: ['Dhaka', 'Chittagong', 'Sylhet', 'Khulna'], answer: 'Dhaka' },
      {
        id: 4,
        question: 'What is the smallest district in Bangladesh by area?',
        options: ['Narayanganj', 'Dhaka', 'Barisal', 'Sylhet'],
        answer: 'Narayanganj',
      },
      {
        id: 5,
        question: 'What was the population of Bangladesh in early 2024?',
        options: ['~16 million', '~18 million', '~174 million', '~22 million'],
        answer: '~174 million',
      },
      {
        id: 6,
        question: 'What is the largest administrative division in Bangladesh by area?',
        options: ['Dhaka', 'Chittagong', 'Sylhet', 'Barisal'],
        answer: 'Chittagong',
      },
      {
        id: 7,
        question: 'What is the smallest administrative division in Bangladesh by area?',
        options: ['Mymensingh', 'Chittagong', 'Sylhet', 'Barisal'],
        answer: 'Mymensingh',
      },
      { id: 8, question: 'What is the capital of Bangladesh?', options: ['Dhaka', 'Chittagong', 'Sylhet', 'Barisal'], answer: 'Dhaka' },
      { id: 9, question: 'What is the currency of Bangladesh?', options: ['BDT', 'USD', 'EUR', 'GBP'], answer: 'BDT' },
      {
        id: 10,
        question: 'When is the Independence Day of Bangladesh?',
        options: ['25 March', '26 March', '27 March', '28 March'],
        answer: '26 March',
      },
    ],
  },
];

const totalClasses = classList.length;
const totalDuration = calculateTotalVideoDuration(classList);

export const allCourseData: Course[] = [
  {
    id: 1,
    title: 'Lecture 1 Basic Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 2,
    title: 'Lecture 2 Mid Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 3,
    title: 'Lecture 3 Advanced Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 4,
    title: 'Lecture 4 Practice 1 Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 5,
    title: 'Lecture 5 Practice 2 Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 6,
    title: 'Lecture 6 Practice 3 Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
  {
    id: 7,
    title: 'Lecture 7 Practice 4 Spoken',
    totalClass: totalClasses,
    duration: totalDuration,
    classList: classList,
  },
];

```
and course-header.tsx
```
'use client';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';

const CourseHeader = ({ title }: { title: string }) => {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const formattedDate = format(time, 'eeee, MMMM do, yyyy');
  const formattedTime = format(time, 'h:mm:ss a');

  return (
    <div className="flex flex-col items-center justify-between rounded-lg bg-white p-4 shadow-md sm:flex-row">
      <h1 className="text-2xl font-bold text-gray-800">{title}</h1>
      <div className="mt-2 text-center text-sm text-gray-600 sm:mt-0 sm:text-right">
        <p>{formattedDate}</p>
        <p className="font-semibold text-blue-600">{formattedTime} (BST)</p>
      </div>
    </div>
  );
};

export default CourseHeader;

```
and course-playlist.tsx
```
import { motion } from 'framer-motion';
import { PlayCircle, CheckCircle } from 'lucide-react';

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { ClassItem, allCourseData } from './course-data';

export interface AttendanceRecord {
  id: number;
  date: string;
  lectureId: number;
  lectureTitle: string;
}

interface CoursePlaylistProps {
  todaysLecture: ClassItem | null;
  onSelectContent: (content: ClassItem) => void;
  selectedContentId: number;
  phase: 'ATTENDANCE_PENDING' | 'LECTURE_IN_PROGRESS' | 'LECTURE_COMPLETED';
  attendance: AttendanceRecord[];
  onNextLecture: () => void;
}

const CoursePlaylist = ({ todaysLecture, onSelectContent, selectedContentId, phase, attendance, onNextLecture }: CoursePlaylistProps) => {
  const course = allCourseData[0];
  console.log('course : ', course);
  const allCourseLectures = allCourseData;
  allCourseLectures.length = 4;
  return (
    <div className="w-full rounded-lg bg-white p-2 shadow-md md:p-4">
      {todaysLecture && (
        <div className={`mb-4 rounded-lg border p-4 ${phase === 'LECTURE_COMPLETED' ? 'border-green-500 bg-green-50' : 'border-blue-500 bg-blue-50'}`}>
          <h3 className={`text-lg font-semibold ${phase === 'LECTURE_COMPLETED' ? 'text-green-800' : 'text-blue-800'}`}>
            Today&apos;s Lecture: {todaysLecture.title}
          </h3>
          {phase === 'LECTURE_COMPLETED' && <p className="mt-1 text-sm text-green-700">Completed!</p>}
        </div>
      )}

      <ScrollArea className="h-[500px] w-full rounded-md border p-4">
        <h2 className="mb-4 text-lg font-bold text-gray-800">Course Content</h2>
        {allCourseData.map(currentCourse => (
          <div className="py-2" key={currentCourse.id}>
            <Accordion type="single" collapsible defaultValue="item-1" className="w-full">
              <AccordionItem value="item-1" className="mb-2 rounded-lg border bg-slate-50 px-4 last:mb-0">
                <AccordionTrigger className="text-lg font-semibold text-gray-800 hover:no-underline">{currentCourse.title}</AccordionTrigger>
                <AccordionContent>
                  <div className="mb-4 flex justify-between border-b pb-2 text-sm text-gray-500">
                    <span>Task: 5</span>
                    <span>Duration: 1 Hours 5 minutes</span>
                  </div>
                  <ul className="space-y-2">
                    {currentCourse.classList.map((item, index) => (
                      <motion.li
                        key={item.id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.05 }}
                        onClick={() => onSelectContent(item)}
                        className={`flex cursor-pointer items-center justify-between rounded-md p-3 transition-all duration-200 ${
                          selectedContentId === item.id ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-blue-100'
                        }`}
                      >
                        <div className="flex items-center">
                          {phase === 'LECTURE_COMPLETED' && todaysLecture?.id === item.id ? (
                            <CheckCircle className="mr-2 h-5 w-5 text-green-500" />
                          ) : (
                            <PlayCircle className="mr-2 h-5 w-5" />
                          )}
                          <span className="font-semibold">{item.title}</span>
                        </div>
                        <span className="text-xs">{item.duration}</span>
                      </motion.li>
                    ))}
                  </ul>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>
        ))}
      </ScrollArea>

      <div className="mt-4 flex flex-col items-center gap-4">
        {phase === 'LECTURE_COMPLETED' && (
          <button onClick={onNextLecture} className="w-full rounded-lg bg-green-500 px-4 py-2 text-white transition-all hover:bg-green-600">
            Next Lecture
          </button>
        )}
        <Dialog>
          <DialogTrigger asChild>
            <button className="w-full rounded-lg bg-gray-700 px-4 py-2 text-white transition-all hover:bg-gray-800">My Attendance</button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>My Attendance</DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <ul className="space-y-2">
                {attendance.map(record => (
                  <li key={record.id} className="rounded-md border p-3">
                    <p className="font-semibold">{record.lectureTitle}</p>
                    <p className="text-sm text-gray-500">{new Date(record.date).toLocaleDateString()}</p>
                  </li>
                ))}
              </ul>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default CoursePlaylist;

```
and model-content.tsx
```
import { Button } from '@/components/ui/button';
import { motion } from 'framer-motion';
import { ArrowLeft, ArrowRight } from 'lucide-react';
import PreviousButton from './previous-button';
import NextButton from './next-button';

const ModalContent = ({ content, onNext, onPrevious }: { content: string; nextFromModal: () => void; onPrevious: () => void; onNext: () => void }) => (
  <div className="w-full flex flex-col">
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
      transition={{ duration: 0.3 }}
      className="rounded-lg bg-white p-6 shadow-lg"
      dangerouslySetInnerHTML={{ __html: content }}
    />
    <div className="flex w-auto items-center justify-end gap-2">
      <PreviousButton />
      <NextButton />
    </div>
  </div>
);

export default ModalContent;

```
and page.tsx
```

'use client';

import { useState, useEffect } from 'react';
import { AnimatePresence } from 'framer-motion';
import { isSameDay } from 'date-fns';

import CourseHeader from './course-header';
import { allCourseData, ClassItem } from './course-data';
import CoursePlaylist, { AttendanceRecord } from './course-playlist';
import VideoPlayer from './video-player';
import ModalContent from './modal-content';
import Quiz from './quiz';
import AttendanceComponent from './attendance-component';

const allLectures = allCourseData.flatMap(course => course.classList);

const Page = () => {
  const [phase, setPhase] = useState<'ATTENDANCE_PENDING' | 'LECTURE_IN_PROGRESS' | 'LECTURE_COMPLETED'>('ATTENDANCE_PENDING');
  const [attendance, setAttendance] = useState<AttendanceRecord[]>([]);
  const [selectedContent, setSelectedContent] = useState<ClassItem | null>(null);
  const [unlockedLectures, setUnlockedLectures] = useState<ClassItem[]>([]);
  const [todaysLecture, setTodaysLecture] = useState<ClassItem | null>(null);

  useEffect(() => {
    // Load attendance from localStorage
    const savedAttendance = JSON.parse(localStorage.getItem('attendance') || '[]') as AttendanceRecord[];
    setAttendance(savedAttendance);

    const today = new Date();
    const todaysRecord = savedAttendance.find(record => isSameDay(new Date(record.date), today));

    if (todaysRecord) {
      // Attendance for today exists
      const savedPhase = (localStorage.getItem('todaysPhase') as typeof phase) || 'LECTURE_IN_PROGRESS';
      setPhase(savedPhase);

      // const lecture = allLectures.find(l => l.id === todaysRecord.lectureId) || null;
      // setTodaysLecture(lecture);
      // setSelectedContent(lecture);
    }

    // Update unlocked lectures based on all attendance records
    // const unlocked = allLectures.filter(lecture => savedAttendance.some(record => record.lectureId === lecture.id));
    // console.log('allLectures ', allLectures);
    // setUnlockedLectures(unlocked);
  }, []);

  const updateLocalStorage = (newAttendance: AttendanceRecord[], newPhase: typeof phase) => {
    localStorage.setItem('attendance', JSON.stringify(newAttendance));
    localStorage.setItem('todaysPhase', newPhase);
    setAttendance(newAttendance);
    setPhase(newPhase);
  };

  const handleAttendanceSubmit = () => {
    const nextLectureIndex = attendance.length;
    if (nextLectureIndex < allLectures.length) {
      const nextLecture = allLectures[nextLectureIndex];
      const newRecord: AttendanceRecord = {
        id: attendance.length + 1,
        date: new Date().toISOString(),
        lectureId: nextLecture.id,
        lectureTitle: nextLecture.title,
      };
      const newAttendance = [...attendance, newRecord];
      updateLocalStorage(newAttendance, 'LECTURE_IN_PROGRESS');
      setUnlockedLectures([...unlockedLectures, nextLecture]);
      setTodaysLecture(nextLecture);
      setSelectedContent(nextLecture);
    }
  };

  const handleLectureComplete = () => {
    updateLocalStorage(attendance, 'LECTURE_COMPLETED');
  };

  const handleNextLecture = () => {
    alert('You are ready for the next day! Please come back tomorrow to submit your attendance for the next lecture.');
    // In a real app, you might guide them to a dashboard or summary page.
  };

  const handleSelectContent = (content: ClassItem) => {
    setSelectedContent(content);
  };

  const handlePrevious = () => {
    if (!selectedContent) return;
    const currentIndex = unlockedLectures.findIndex(l => l.id === selectedContent.id);
    if (currentIndex > 0) {
      setSelectedContent(unlockedLectures[currentIndex - 1]);
    }
  };

  const handleNext = () => {
    if (!selectedContent) return;
    const currentIndex = unlockedLectures.findIndex(l => l.id === selectedContent.id);
    if (currentIndex < unlockedLectures.length - 1) {
      setSelectedContent(unlockedLectures[currentIndex + 1]);
    } else if (phase !== 'LECTURE_COMPLETED') {
      handleLectureComplete();
    }
  };

  const nextFromModal = () => {
    console.log(' invoke from modal');
  };
  const afterfinishedQuiz = () => {
    console.log(' invoke from afterfinishedQuiz');
  };
  return (
    <main className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8">
      <div className="mx-auto max-w-7xl">
        <CourseHeader title="IELTS SPOKEN" />
        <div className="mt-8">
          {phase === 'ATTENDANCE_PENDING' ? (
            <AttendanceComponent onAttend={handleAttendanceSubmit} />
          ) : (
            <div className="grid grid-cols-1 gap-8 lg:grid-cols-3">
              <div className="lg:col-span-2">
                <AnimatePresence mode="wait">
                  {selectedContent?.type === 'video' && selectedContent.videoUrl && (
                    <VideoPlayer videoUrl={selectedContent.videoUrl} onNext={handleNext} onPrevious={handlePrevious} />
                  )}
                  {selectedContent?.type === 'modal' && selectedContent.modelCentent && (
                    <ModalContent content={selectedContent.modelCentent} nextFromModal={nextFromModal} onNext={handleNext} onPrevious={handlePrevious} />
                  )}
                  {selectedContent?.type === 'Questions' && selectedContent.questionsData && (
                    <Quiz questions={selectedContent.questionsData} onNext={afterfinishedQuiz} />
                  )}
                </AnimatePresence>
              </div>
              <div className="lg:col-span-1">
                <CoursePlaylist
                  todaysLecture={todaysLecture}
                  onSelectContent={handleSelectContent}
                  selectedContentId={selectedContent?.id || 0}
                  phase={phase}
                  attendance={attendance}
                  onNextLecture={handleNextLecture}
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </main>
  );
};

export default Page;

```
and quiz.tsx
```

'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Question } from './course-data'; // Assuming Question type is exported from course-data

type UserAnswer = {
  questionId: number;
  selectedOption: string;
  correctAnswer: string;
  isCorrect: boolean;
};

interface QuizProps {
  questions: Question[];
  onNext: () => void; // Prop to signal completion
}

const Quiz = ({ questions, onNext }: QuizProps) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [userAnswers, setUserAnswers] = useState<UserAnswer[]>([]);
  const [isCompleted, setIsCompleted] = useState(false);
  const [quizFinished, setQuizFinished] = useState(false);

  const handleNext = () => {
    if (selectedAnswer === null) return;

    const currentQuestion = questions[currentQuestionIndex];
    setUserAnswers([
      ...userAnswers,
      {
        questionId: currentQuestion.id,
        selectedOption: selectedAnswer,
        correctAnswer: currentQuestion.answer,
        isCorrect: selectedAnswer === currentQuestion.answer,
      },
    ]);

    setSelectedAnswer(null);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      setIsCompleted(true);
    }
  };

  const handleDownloadReport = async () => {
    try {
      const score = userAnswers.filter(answer => answer.isCorrect).length;
      const percentage = Math.round((score / questions.length) * 100);

      const { jsPDF } = await import('jspdf');
      const doc = new jsPDF();

      doc.setFont('helvetica', 'bold');
      doc.setFontSize(20);
      doc.setTextColor(34, 34, 34);

      doc.text('Quiz Report', 20, 30);

      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text(`Final Score: ${score} out of ${questions.length} (${percentage}%)`, 20, 50);
      doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 60);

      doc.setDrawColor(200, 200, 200);
      doc.line(20, 70, 190, 70);

      let yPosition = 85;

      questions.forEach((question, index) => {
        const userAnswer = userAnswers[index];
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(12);
        doc.text(`Question ${index + 1}:`, 20, yPosition);
        yPosition += 8;
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(10);
        const questionLines = doc.splitTextToSize(question.question, 170);
        doc.text(questionLines, 20, yPosition);
        yPosition += questionLines.length * 5 + 5;
        if (userAnswer.isCorrect) {
          doc.setTextColor(34, 139, 34);
        } else {
          doc.setTextColor(220, 20, 60);
        }
        doc.text(`Your Answer: ${userAnswer.selectedOption} ${userAnswer.isCorrect ? '✓' : '✗'}`, 20, yPosition);
        yPosition += 8;
        if (!userAnswer.isCorrect) {
          doc.setTextColor(34, 139, 34);
          doc.text(`Correct Answer: ${userAnswer.correctAnswer}`, 20, yPosition);
          yPosition += 8;
        }
        doc.setTextColor(34, 34, 34);
        yPosition += 5;
      });

      doc.save('quiz-report.pdf');
    } catch (error) {
      console.error('Error generating PDF:', error);
      handleDownloadTextReport();
    }
  };

  const handleDownloadTextReport = () => {
    const score = userAnswers.filter(answer => answer.isCorrect).length;
    let reportContent = `Quiz Report\n`;
    reportContent += `Final Score: ${score} out of ${questions.length}\n`;
    reportContent += `Date: ${new Date().toLocaleDateString()}\n`;
    reportContent += `----------------------------------------\n\n`;

    questions.forEach((question, index) => {
      const userAnswer = userAnswers[index];
      reportContent += `Question ${index + 1}: ${question.question}\n`;
      reportContent += `Your Answer: ${userAnswer.selectedOption} ${userAnswer.isCorrect ? '(Correct)' : '(Incorrect)'}\n`;
      reportContent += `Correct Answer: ${userAnswer.correctAnswer}\n\n`;
    });

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'quiz-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const resetQuiz = () => {
    setCurrentQuestionIndex(0);
    setSelectedAnswer(null);
    setUserAnswers([]);
    setIsCompleted(false);
    setQuizFinished(false);
  };

  useEffect(() => {
    if (!quizFinished) {
      onNext(); // Signal that the lecture (quiz) is complete
      setQuizFinished(true); // Ensure it only runs once per completion
    }
  }, [onNext, quizFinished]);

  if (isCompleted) {
    const score = userAnswers.filter(answer => answer.isCorrect).length;
    const percentage = Math.round((score / questions.length) * 100);

    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 p-3 sm:p-6 lg:p-8">
        <div className="mx-auto max-w-4xl">
          <motion.div
            initial={{ opacity: 0, y: 50, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            className="glass-effect rounded-2xl p-6 sm:p-8 lg:p-10"
          >
            <div className="mb-8 text-center">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}
                className="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-gradient-to-r from-green-400 to-blue-500 text-2xl sm:h-24 sm:w-24 sm:text-3xl"
              >
                🎉
              </motion.div>
              <h2 className="bg-gradient-to-r from-gray-700 to-gray-900 bg-clip-text text-2xl font-bold text-transparent sm:text-3xl lg:text-4xl">
                Quiz Completed!
              </h2>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.6 }}
                className="mt-4 inline-block rounded-full border border-gray-300/30 bg-gray-800/10 px-6 py-3 backdrop-blur-sm"
              >
                <p className="text-lg text-gray-800 sm:text-xl">
                  Your Score:{' '}
                  <span className="font-bold text-blue-600">
                    {score}/{questions.length}
                  </span>
                </p>
                <p className="text-sm text-gray-600 sm:text-base">{percentage}% Accuracy</p>
              </motion.div>
            </div>

            <div className="mb-8 flex justify-center">
              <div className="relative h-32 w-32 sm:h-40 sm:w-40">
                <svg className="h-full w-full -rotate-90 transform" viewBox="0 0 100 100">
                  <circle cx="50" cy="50" r="40" stroke="rgba(156,163,175,0.3)" strokeWidth="8" fill="none" />
                  <motion.circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="url(#gradient)"
                    strokeWidth="8"
                    fill="none"
                    strokeDasharray={`${2 * Math.PI * 40}`}
                    initial={{ strokeDashoffset: 2 * Math.PI * 40 }}
                    animate={{ strokeDashoffset: 2 * Math.PI * 40 * (1 - percentage / 100) }}
                    transition={{ duration: 1.5, ease: 'easeInOut' }}
                    strokeLinecap="round"
                  />
                  <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%" stopColor="#3B82F6" />
                      <stop offset="100%" stopColor="#6366F1" />
                    </linearGradient>
                  </defs>
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-2xl font-bold text-gray-800 sm:text-3xl">{percentage}%</span>
                </div>
              </div>
            </div>

            <div className="custom-scrollbar mb-8 max-h-72 space-y-4 overflow-y-auto pr-2 sm:max-h-80 lg:max-h-96">
              <AnimatePresence>
                {questions.map((question, index) => {
                  const userAnswer = userAnswers[index];
                  return (
                    <motion.div
                      key={question.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`glass-card rounded-xl border-l-4 p-4 ${
                        userAnswer.isCorrect ? 'border-green-500 bg-green-50/80' : 'border-red-500 bg-red-50/80'
                      }`}
                    >
                      <p className="text-sm font-semibold text-gray-800 sm:text-base">{question.question}</p>
                      <p className={`mt-2 text-xs sm:text-sm ${userAnswer.isCorrect ? 'text-green-700' : 'text-red-700'}`}>
                        Your answer: {userAnswer.selectedOption}
                      </p>
                      {!userAnswer.isCorrect && <p className="mt-1 text-xs text-green-700 sm:text-sm">Correct answer: {userAnswer.correctAnswer}</p>}
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            </div>

            <div className="flex flex-col justify-center gap-4 sm:flex-row">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleDownloadReport}
                className="glass-button rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 py-3 px-6 font-semibold text-white shadow-lg transition-all duration-300 hover:from-blue-600 hover:to-indigo-700 hover:shadow-xl border-blue-300 sm:px-8"
              >
                📄 Download PDF Report
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={resetQuiz}
                className="glass-button rounded-full border border-gray-300/50 bg-white/60 py-3 px-6 font-semibold text-gray-700 backdrop-blur-sm transition-all duration-300 hover:border-gray-400/50 hover:bg-white/80 sm:px-8"
              >
                🔄 Retake Quiz
              </motion.button>
            </div>
          </motion.div>
        </div>

        <style jsx>{`
          .glass-effect {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(209, 213, 219, 0.3);
            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
          }
          .glass-card {
            background: rgba(255, 255, 255, 0.6);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(209, 213, 219, 0.2);
          }
          .glass-button {
            backdrop-filter: blur(10px);
            border: 1px solid rgba(209, 213, 219, 0.3);
          }
          .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
          }
          .custom-scrollbar::-webkit-scrollbar-track {
            background: rgba(156, 163, 175, 0.2);
            border-radius: 3px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb {
            background: rgba(156, 163, 175, 0.5);
            border-radius: 3px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: rgba(156, 163, 175, 0.7);
          }
        `}</style>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 p-3 sm:p-6 lg:p-8">
      <div className="mx-auto max-w-2xl lg:max-w-4xl">
        <motion.div initial={{ opacity: 0, y: 50 }} animate={{ opacity: 1, y: 0 }} className="glass-effect rounded-2xl p-6 sm:p-8 lg:p-10">
          <div className="mb-6 sm:mb-8">
            <div className="mb-4 flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <h2 className="bg-gradient-to-r from-gray-700 to-gray-900 bg-clip-text text-xl font-bold text-transparent sm:text-2xl lg:text-3xl">
                Question {currentQuestionIndex + 1}
              </h2>
              <div className="mt-2 text-sm text-gray-600 sm:mt-0 sm:text-base">
                {currentQuestionIndex + 1} of {questions.length}
              </div>
            </div>

            <div className="relative h-3 w-full overflow-hidden rounded-full bg-gray-200/50 backdrop-blur-sm sm:h-4">
              <motion.div
                className="h-full rounded-full bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 shadow-lg"
                initial={{ width: '0%' }}
                animate={{ width: `${progress}%` }}
                transition={{ duration: 0.8, ease: 'easeInOut' }}
              />
              <div className="animate-pulse absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent" />
            </div>
            <p className="mt-2 text-right text-xs text-gray-500 sm:text-sm">{Math.round(progress)}% Complete</p>
          </div>

          <motion.div
            key={currentQuestionIndex}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            className="glass-card mb-6 rounded-xl p-4 sm:mb-8 sm:p-6"
          >
            <p className="text-base font-medium leading-relaxed text-gray-800 sm:text-lg lg:text-xl">{currentQuestion.question}</p>
          </motion.div>

          <div className="mb-6 space-y-3 sm:mb-8 sm:space-y-4">
            <AnimatePresence>
              {currentQuestion.options.map((option, index) => (
                <motion.button
                  key={option}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setSelectedAnswer(option)}
                  className={`w-full transform rounded-xl p-4 text-left transition-all duration-300 sm:p-5 ${
                    selectedAnswer === option
                      ? 'glass-button border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50 text-gray-800 ring-2 ring-blue-500/50 shadow-xl'
                      : 'glass-card border-gray-200/50 bg-white/60 text-gray-700 hover:shadow-lg hover:bg-white/80'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <div
                      className={`h-3 w-3 rounded-full border-2 transition-all duration-300 sm:h-4 sm:w-4 ${
                        selectedAnswer === option ? 'border-blue-500 bg-blue-500' : 'border-gray-400'
                      }`}
                    />
                    <span className="text-sm font-medium sm:text-base lg:text-lg">{option}</span>
                  </div>
                </motion.button>
              ))}
            </AnimatePresence>
          </div>

          <div className="flex items-center justify-between">
            <div className="text-xs text-gray-500 sm:text-sm">{selectedAnswer ? '✓ Answer selected' : 'Select an answer to continue'}</div>
            <motion.button
              whileHover={{ scale: selectedAnswer ? 1.05 : 1 }}
              whileTap={{ scale: selectedAnswer ? 0.95 : 1 }}
              onClick={handleNext}
              disabled={!selectedAnswer}
              className={`glass-button rounded-full py-3 px-6 font-semibold transition-all duration-300 sm:px-8 lg:px-10 ${
                selectedAnswer
                  ? 'cursor-pointer border-blue-300 bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-lg hover:from-blue-600 hover:to-indigo-700 hover:shadow-xl'
                  : 'cursor-not-allowed border-gray-300 bg-gray-200/50 text-gray-400'
              }`}
            >
              {isLastQuestion ? '🏁 Finish Quiz' : '➡️ Next Question'}
            </motion.button>
          </div>
        </motion.div>
      </div>

      <style jsx>{`
        .glass-effect {
          background: rgba(255, 255, 255, 0.7);
          backdrop-filter: blur(20px);
          border: 1px solid rgba(209, 213, 219, 0.3);
          box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);
        }
        .glass-card {
          background: rgba(255, 255, 255, 0.6);
          backdrop-filter: blur(10px);
          border: 1px solid rgba(209, 213, 219, 0.2);
        }
        .glass-button {
          backdrop-filter: blur(10px);
          border: 1px solid rgba(209, 213, 219, 0.3);
        }
      `}</style>
    </div>
  );
};

export default Quiz;

```
and video-player.tsx
```
'use client';

import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AlertTriangle, Maximize, Minimize } from 'lucide-react';

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import PreviousButton from './previous-button';
import NextButton from './next-button';

interface VideoPlayerProps {
  videoUrl: string;
  onPrevious: () => void;
  onNext: () => void;
}

const WarningContent = () => (
  <>
    <p className="mb-4">
      TestPrep এর সাথে সম্পৃক্ত যেকোনো ভিডিও, টেক্সট বা কনটেন্ট অন্য কারো সঙ্গে অর্থের বিনিময়ে বা বিনামূল্যে আদান-প্রদান বা শেয়ার করা, কারও সাথে ইমেইল-একাউন্ট
      পাসওয়ার্ড শেয়ার করা আইনত দন্ডনীয় অপরাধ। এজন্য অন্তত ৫ বছর থেকে শুরু করে সর্বোচ্চ ১৪ বছরের জেল হতে পারে। শুধু তাই না, একই সাথে ৫ লাখ টাকা থেকে শুরু করে
      সর্বোচ্চ ৫০ লাখ টাকা জরিমানাও গুনতে হতে পারে।
    </p>
    <p className="mb-4">
      সাইবার সিকিউরিটি কেইসে কাউকে গ্রেফতার করার জন্য কোনো মামলার প্রয়োজন হয় না। এমনকি কোনো ওয়ারেন্টও ইস্যু করতে হয় না। সরাসরি গ্রেফতার করে হাজতে নিয়ে যাওয়া হয়।
      সুতরাং সামান্য কিছু টাকার জন্য দুই নাম্বারি করতে গিয়ে কত বছর জেলে থাকতে হবে, সেটাও একবার ভালো করে হিসাব করে নিও!!
    </p>
    <p className="mb-4">
      অন্য নামে একাউন্ট খুলে অথবা ফেইসবুকে ফেইক একাউন্ট করে অথবা ইনকগনিটো মুডে একাউন্ট খুললে তোমাকে ট্র‍্যাক করা যাবে না। এমনটা যদি ভেবে থাকো তাহলে তুমি বোকার
      স্বর্গে বাস করছো। তোমার ISP, তোমার IP এড্রেস, তোমার ফোন এর প্রত্যেকটা কল, প্রত্যেকটা মেসেজ রেকর্ড থাকে। শুধু সেটাই না, ফেইসবুক, জিমেইল, গুগোল সরকারের
      সাইবার ক্রাইম টিম কে যেকোনো ডিলিটেড তথ্য সাথে সাথে প্রোভাইড করা হয়ে থাকে। এছাড়াও তোমার একাউন্ট কোন আইপি এড্রেস থেকে লগইন করা হয়েছে বা কোন জায়গা লগইন করা
      হয়েছে সেটাও আমাদের সার্ভারে আছে। সুতরাং একটু চেষ্টা করলেই, ২৪ ঘন্টার মধ্যে তোমাকে ধরে ফেলার ফেলার ক্ষমতা সাইবার ক্রিমিনাল ডিপার্টমেন্ট রাখে।
    </p>
    <p className="mb-4">
      আমরা অনেকদিন ধরে চিন্তা করছি দুই-একজনকে কোর্স চুরি করে বিক্রি করার জন্য দৃষ্টান্তমূলক শাস্তি দিব। যেন দেশের অন্য সবাই সেটা দেখে সতর্ক হয়ে যায়। সুতরাং,
      তুমি যদি নিজেকে ১৫ বছর জেলের ভিতরে দেখতে না চাও, তাহলে আমাদের কোর্স এর ভিডিও ডাউনলোড করে কারো সাথে অর্থের বিনিময়ে বা বিনামূল্যে দেয়া থেকে বিরত থাকো। তোমার
      ভাব-মূর্তি এবং তোমার ফ্যামিলি&apos;s কথা চিন্তা করো।
    </p>
    <p>একবার ফেঁসে গেলে কিন্তু কেউ তোমাকে বাঁচাতে আসবে না।</p>
  </>
);

const VideoPlayer = ({ videoUrl, onPrevious, onNext }: VideoPlayerProps) => {
  const [popup, setPopup] = useState({ visible: false, top: '50%', left: '50%' });
  const [isFullscreen, setIsFullscreen] = useState(false);
  const playerContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const interval = setInterval(() => {
      const top = `${Math.random() * 80 + 10}%`;
      const left = `${Math.random() * 80 + 10}%`;
      setPopup({ visible: true, top, left });
      setTimeout(() => setPopup(prev => ({ ...prev, visible: false })), 1500);
    }, 5000);
    return () => clearInterval(interval);
  }, [videoUrl]);

  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);

  const toggleFullScreen = () => {
    if (!playerContainerRef.current) return;

    if (!isFullscreen) {
      playerContainerRef.current.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  };

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="w-full rounded-lg bg-slate-100 p-4">
      <div ref={playerContainerRef} className="relative aspect-video bg-black">
        <iframe
          width="100%"
          height="100%"
          src={videoUrl}
          title="YouTube video player"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerPolicy="strict-origin-when-cross-origin"
          className="rounded-lg shadow-2xl"
        ></iframe>
        <AnimatePresence>
          {popup.visible && (
            <motion.div
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5 }}
              transition={{ duration: 0.2 }}
              style={{ top: popup.top, left: popup.left }}
              className="pointer-events-none absolute z-10 text-[8px] font-bold text-red-500"
            >
              toufiquer.0@gmail.com
            </motion.div>
          )}
        </AnimatePresence>
        <button
          onClick={toggleFullScreen}
          className="absolute bottom-2 right-2 z-10 flex items-center gap-2 rounded-lg  px-3 py-1 text-white transition-colors hover:bg-opacity-75"
        >
          {isFullscreen ? <Minimize size={18} /> : <Maximize size={18} />}
        </button>
      </div>

      <div className="mt-4 flex w-full items-center justify-between">
        <Dialog>
          <DialogTrigger asChild>
            <button className="flex items-center gap-2 rounded-lg bg-red-500 px-4 py-2 text-white transition-colors hover:bg-red-600">
              <AlertTriangle size={16} />
              Caution
            </button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Warning</DialogTitle>
              <DialogDescription>Please read the following carefully.</DialogDescription>
            </DialogHeader>
            <ScrollArea className="h-[400px] w-full rounded-md border p-4">
              <WarningContent />
            </ScrollArea>
          </DialogContent>
        </Dialog>

        <div className="flex w-auto items-center justify-end gap-2">
          <PreviousButton />
          <NextButton />
        </div>
      </div>
    </motion.div>
  );
};

export default VideoPlayer;

```
remove all useState and you have to use zustand for state management. and do not change any other things. and give me all file with full data.