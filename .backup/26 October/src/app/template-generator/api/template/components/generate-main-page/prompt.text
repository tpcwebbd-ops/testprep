look at the code 

generate-page.tsx
```
/**
 * Generates the content for the main client-side management page (page.tsx).
 *
 * @param {InputJsonFile} inputJsonFile The JSON object with schema and naming conventions.
 * @returns {string} The complete page.tsx file content as a string.
 */
export const generateMainPageFile = (inputJsonFile: string): string => {
    const { namingConvention } = JSON.parse(inputJsonFile) || {}

    // Extract names and format them for different uses
    const pluralPascalCase = namingConvention.Users_1_000___ // e.g., "Posts"
    const singularPascalCase = namingConvention.User_3_000___ // e.g., "Post"

    // Construct the file content using a template literal
    return `'use client'

import React, { useState } from 'react'
import { PlusIcon } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { BiRightArrowAlt } from 'react-icons/bi'

import { Button } from '@/components/ui/button'
import { FetchBaseQueryError } from '@reduxjs/toolkit/query'

import AddFile from './components/Add'
import EditFile from './components/Edit'
import ViewFile from './components/View'
import SearchBox from './components/SearchBox'
import DeleteFile from './components/Delete'
import BulkEditFile from './components/BulkEdit'
import { use${pluralPascalCase}Store } from './store/store'
import TooManyRequests from './components/TooManyRequest'
import BulkDeleteFile from './components/BulkDelete'
import { useGet${pluralPascalCase}Query } from './redux/rtk-api'
import View${pluralPascalCase}Table from './components/TableView'
import BulkUpdate${pluralPascalCase} from './components/BulkUpdate'
import BulkDynamicUpdate${pluralPascalCase} from './components/BulkDynamicUpdate'
import { handleSuccess } from './components/utils'
import { IoReloadCircleOutline } from 'react-icons/io5'

const MainNextPage: React.FC = () => {
    const [hashSearchText, setHashSearchText] = useState('')
    const {
        toggleAddModal,
        queryPramsLimit,
        queryPramsPage,
        queryPramsQ,
        setQueryPramsPage,
        setQueryPramsQ,
    } = use${pluralPascalCase}Store()

    const {
        data: getResponseData,
        isSuccess,
        isLoading,
        refetch,
        status: statusCode,
    } = useGet${pluralPascalCase}Query(
        { q: queryPramsQ, page: queryPramsPage, limit: queryPramsLimit },
        {
            selectFromResult: ({ data, isSuccess,isLoading, status, error }) => ({
                data,
                isSuccess,
                isLoading,
                status:
                    'status' in (error || {})
                        ? (error as FetchBaseQueryError).status
                        : status, // Extract HTTP status code
                error,
            }),
        }
    )

    const handleSearch = (query: string) => {
        if (query !== hashSearchText) {
            setHashSearchText(query)
            setQueryPramsPage(1)
            setQueryPramsQ(query)
        }
    }

    const modals = [
        AddFile,
        ViewFile,
        BulkDeleteFile,
        BulkEditFile,
        EditFile,
        DeleteFile,
        BulkUpdate${pluralPascalCase},
        BulkDynamicUpdate${pluralPascalCase},
    ]
    const router = useRouter()

    let renderUI = (
        <div className="container mx-auto p-4">
            <div className="flex flex-col md:flex-row gap-2 justify-between items-center mb-6">
                <h1 className="h2 w-full">
                    ${singularPascalCase} Management{' '}
                    {isSuccess && (
                        <sup className="text-xs">
                            (total:{getResponseData?.data?.total || '00'})
                        </sup>
                    )}
                </h1>
                <div className="w-full flex flex-col md:flex-row gap-2 item-center justify-end">
                       <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                            refetch()
                            handleSuccess('Reloaded!')
                        }}
                        disabled={isLoading}
                    >
                        <IoReloadCircleOutline className="w-4 h-4 mr-1" />{' '}
                        Reload
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() => toggleAddModal(true)}
                    >
                        <PlusIcon className="w-4 h-4" />
                        Add ${singularPascalCase}
                    </Button>
                </div>
            </div>
            <SearchBox
                onSearch={handleSearch}
                placeholder="Search here ..."
                autoFocus={false}
            />
            <View${pluralPascalCase}Table />
            {modals.map((ModalComponent, index) => (
                <ModalComponent key={index} />
            ))}
        </div>
    )

    if (statusCode === 429) {
        renderUI = <TooManyRequests />
    }

    return renderUI
}

export default MainNextPage
`
}

```




here is example of update page.tsx 
```
'use client'

import React, { useState, useMemo } from 'react' // Added useMemo
import { PlusIcon, XIcon } from 'lucide-react' // Added XIcon
import { useRouter } from 'next/navigation'
import { FetchBaseQueryError } from '@reduxjs/toolkit/query'

import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge' // Added Badge for styling
import { IoReloadCircleOutline } from 'react-icons/io5'

import AddFile from './components/Add'
import EditFile from './components/Edit'
import ViewFile from './components/View'
import SearchBox from './components/SearchBox'
import DeleteFile from './components/Delete'
import BulkEditFile from './components/BulkEdit'
import TooManyRequests from './components/TooManyRequest'
import BulkDeleteFile from './components/BulkDelete'
import ViewPostsTable from './components/TableView'
import BulkUpdatePosts from './components/BulkUpdate'
import BulkDynamicUpdatePosts from './components/BulkDynamicUpdate'
import FilterDialog, { FilterPayload } from './components/FilterDialog'

import { usePostsStore } from './store/store'
import { useGetPostsQuery } from './redux/rtk-api'
import { handleSuccess } from './components/utils'

const MainNextPage: React.FC = () => {
    const [hashSearchText, setHashSearchText] = useState('')
    const [isFilterModalOpen, setFilterModalOpen] = useState(false)

    const {
        toggleAddModal,
        queryPramsLimit,
        queryPramsPage,
        queryPramsQ,
        setQueryPramsPage,
        setQueryPramsQ,
    } = usePostsStore()

    const {
        data: getResponseData,
        isSuccess,
        isLoading,
        refetch,
        status: statusCode,
    } = useGetPostsQuery(
        { q: queryPramsQ, page: queryPramsPage, limit: queryPramsLimit },
        {
            selectFromResult: ({
                data,
                isSuccess,
                isLoading,
                status,
                error,
            }) => ({
                data,
                isSuccess,
                isLoading,
                status:
                    'status' in (error || {})
                        ? (error as FetchBaseQueryError).status
                        : status,
                error,
            }),
        }
    )

    // --- NEW: Memoized state to check for and parse the active filter ---
    const activeFilter = useMemo(() => {
        if (queryPramsQ && queryPramsQ.startsWith('createdAt:range:')) {
            try {
                const datePart = queryPramsQ.split(':')[2]
                const [startDate, endDate] = datePart.split('_')
                return {
                    isApplied: true,
                    displayText: `Filtering from ${startDate} to ${endDate}`,
                }
            } catch (e) {
                // In case of malformed query, treat as no filter
                return { isApplied: false, displayText: '' }
            }
        }
        return { isApplied: false, displayText: '' }
    }, [queryPramsQ])
    // ---------------------------------------------------------------------

    const handleSearch = (query: string) => {
        if (query !== hashSearchText) {
            setHashSearchText(query)
            setQueryPramsPage(1)
            setQueryPramsQ(query)
        }
    }

    const handleFilter = () => {
        setFilterModalOpen(true)
    }

    const handleApplyFilter = (filter: FilterPayload) => {
        const { start, end } = filter.value
        const filterQuery = `createdAt:range:${start}_${end}`

        setQueryPramsQ(filterQuery)
        setQueryPramsPage(1)
        refetch()
        handleSuccess('Filter Applied!')
    }

    const handleClearFilter = () => {
        setQueryPramsQ('')
        setQueryPramsPage(1)
        refetch()
        handleSuccess('Filter Cleared!')
    }

    const modals = [
        AddFile,
        ViewFile,
        BulkDeleteFile,
        BulkEditFile,
        EditFile,
        DeleteFile,
        BulkUpdatePosts,
        BulkDynamicUpdatePosts,
    ]

    let renderUI = (
        <div className="container mx-auto p-4">
            <div className="flex flex-col md:flex-row gap-2 justify-between items-center mb-6">
                <h1 className="h2 w-full">
                    Post Management{' '}
                    {isSuccess && (
                        <sup className="text-xs">
                            (total:{getResponseData?.data?.total || '00'})
                        </sup>
                    )}
                </h1>
                <div className="w-full flex flex-col md:flex-row gap-2 item-center justify-end">
                    <Button
                        size="sm"
                        variant="outline"
                        onClick={handleFilter}
                        disabled={isLoading}
                    >
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            className="bi bi-filter-right mr-1"
                            viewBox="0 0 16 16"
                        >
                            <path d="M14 10.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 .5-.5m0-3a.5.5 0 0 0-.5-.5h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 .5-.5m0-3a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0 0 1h11a.5.5 0 0 0 .5-.5" />
                        </svg>
                        Filter
                    </Button>
                    <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                            refetch()
                            handleSuccess('Reloaded!')
                        }}
                        disabled={isLoading}
                    >
                        <IoReloadCircleOutline className="w-4 h-4 mr-1" />{' '}
                        Reload
                    </Button>
                    <Button
                        size="sm"
                        variant="outlineGarden"
                        onClick={() => toggleAddModal(true)}
                    >
                        <PlusIcon className="w-4 h-4" />
                        Add Post
                    </Button>
                </div>
            </div>
            <SearchBox
                onSearch={handleSearch}
                placeholder="Search here ..."
                autoFocus={false}
            />

            {/* --- NEW: Active Filter Display --- */}
            {activeFilter.isApplied && (
                <div className="flex items-center justify-start my-4">
                    <Badge
                        variant="outlineWater"
                        className="flex items-center gap-2 pl-3 pr-1 py-1 text-sm font-normal"
                    >
                        <span>{activeFilter.displayText}</span>
                        <Button
                            aria-label="Clear filter"
                            variant="ghost"
                            size="icon"
                            className="h-6 w-1 rounded-full min-w-5"
                            onClick={handleClearFilter}
                        >
                            <XIcon className="h-4 w-1" />
                        </Button>
                    </Badge>
                </div>
            )}
            {/* ---------------------------------- */}

            <ViewPostsTable />
            {modals.map((ModalComponent, index) => (
                <ModalComponent key={index} />
            ))}

            <FilterDialog
                isOpen={isFilterModalOpen}
                onOpenChange={setFilterModalOpen}
                onApplyFilter={handleApplyFilter}
                onClearFilter={handleClearFilter}
            />
        </div>
    )

    if (statusCode === 429) {
        renderUI = <TooManyRequests />
    }

    return renderUI
}

export default MainNextPage
````



Now Please update the generate-main-page.tsx so it can generate the update page.tsx